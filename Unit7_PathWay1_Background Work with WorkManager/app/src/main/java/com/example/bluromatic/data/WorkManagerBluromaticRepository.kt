/*
 * Copyright (C) 2023 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// üí¨ ƒê√¢y l√† ph·∫ßn license chu·∫©n c·ªßa Google (Apache License 2.0).
// N√≥ cho ph√©p b·∫°n s·ª≠ d·ª•ng, ch·ªânh s·ª≠a, ph√¢n ph·ªëi code n√†y
// mi·ªÖn l√† b·∫°n gi·ªØ l·∫°i ph·∫ßn ghi ch√∫ b·∫£n quy·ªÅn n√†y.
// Kh√¥ng li√™n quan ƒë·∫øn logic ch∆∞∆°ng tr√¨nh.

package com.example.bluromatic.data

import android.content.Context
import android.net.Uri
import androidx.work.Data
import androidx.work.OneTimeWorkRequestBuilder
import androidx.work.WorkInfo
import androidx.work.WorkManager
import com.example.bluromatic.KEY_BLUR_LEVEL
import com.example.bluromatic.KEY_IMAGE_URI
import com.example.bluromatic.getImageUri
import com.example.bluromatic.workers.BlurWorker
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.MutableStateFlow

/**
 * Repository d√πng WorkManager ƒë·ªÉ ch·∫°y c√°c t√°c v·ª• n·ªÅn li√™n quan ƒë·∫øn "blur" ·∫£nh.
 *
 * M·ª•c ti√™u c·ªßa l·ªõp n√†y:
 * - Chu·∫©n b·ªã d·ªØ li·ªáu (inputData) cho Worker
 * - Kh·ªüi ch·∫°y (enqueue) c√¥ng vi·ªác l√†m m·ªù ·∫£nh
 * - Cung c·∫•p Flow ƒë·ªÉ quan s√°t tr·∫°ng th√°i c√¥ng vi·ªác (outputWorkInfo)
 */
class WorkManagerBluromaticRepository(context: Context) : BluromaticRepository {

    // üîπ Flow ch·ª©a th√¥ng tin v·ªÅ tr·∫°ng th√°i c√¥ng vi·ªác ƒëang ch·∫°y (ho·∫∑c ƒë√£ xong)
    // MutableStateFlow(null) nghƒ©a l√† ban ƒë·∫ßu ch∆∞a c√≥ WorkInfo n√†o.
    // Sau n√†y c√≥ th·ªÉ d√πng ƒë·ªÉ emit WorkInfo m·ªõi khi Worker thay ƒë·ªïi tr·∫°ng th√°i.
    override val outputWorkInfo: Flow<WorkInfo?> = MutableStateFlow(null)

    // üîπ L·∫•y URI ·∫£nh m·∫´u (ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a s·∫µn trong h√†m extension getImageUri()).
    // ƒê√¢y l√† ·∫£nh ngu·ªìn m√† Worker s·∫Ω l√†m m·ªù.
    private var imageUri: Uri = context.getImageUri()

    // üîπ L·∫•y instance WorkManager d√πng chung to√†n app.
    // WorkManager ch·ªãu tr√°ch nhi·ªám l√™n l·ªãch, l∆∞u, ch·∫°y v√† qu·∫£n l√Ω c√°c t√°c v·ª• n·ªÅn.
    private val workManager = WorkManager.getInstance(context)

    /**
     * H√†m kh·ªüi ch·∫°y c√¥ng vi·ªác l√†m m·ªù ·∫£nh.
     * @param blurLevel M·ª©c ƒë·ªô l√†m m·ªù (s·ªë nguy√™n, c√†ng l·ªõn c√†ng m·ªù).
     */
    override fun applyBlur(blurLevel: Int) {
        // ‚ö†Ô∏è V·∫§N ƒê·ªÄ: ƒêo·∫°n n√†y trong codelab g·ªëc b·ªã l·ªói th·ª© t·ª± logic.
        // Builder ph·∫£i set inputData TR∆Ø·ªöC khi build() v√† enqueue().

        val blurBuilder = OneTimeWorkRequestBuilder<BlurWorker>()

        blurBuilder.setInputData(createInputDataForWorkRequest(blurLevel, imageUri))

        workManager.enqueue(blurBuilder.build())


    }

    /**
     * H√†m h·ªßy m·ªçi c√¥ng vi·ªác ƒëang ch·∫°y (ch∆∞a ƒë∆∞·ª£c implement).
     * WorkManager cho ph√©p cancel theo tag, id, ho·∫∑c to√†n b·ªô h√†ng ƒë·ª£i.
     * V√≠ d·ª•:
     *     workManager.cancelAllWork()
     * ho·∫∑c:
     *     workManager.cancelAllWorkByTag("blur")
     */
    override fun cancelWork() {}

    /**
     * T·∫°o d·ªØ li·ªáu ƒë·∫ßu v√†o (inputData) cho Worker.
     * @param blurLevel: m·ª©c ƒë·ªô l√†m m·ªù (int)
     * @param imageUri: ƒë∆∞·ªùng d·∫´n ·∫£nh c·∫ßn x·ª≠ l√Ω
     * @return ƒë·ªëi t∆∞·ª£ng Data ch·ª©a c√°c c·∫∑p key-value m√† Worker s·∫Ω nh·∫≠n trong doWork()
     */
    private fun createInputDataForWorkRequest(blurLevel: Int, imageUri: Uri): Data {
        // Data.Builder gi√∫p g√≥i d·ªØ li·ªáu truy·ªÅn v√†o Worker.
        // Ch·ªâ h·ªó tr·ª£ ki·ªÉu d·ªØ li·ªáu c∆° b·∫£n: String, Int, Boolean, Double, Array...
        val builder = Data.Builder()

        // Ghi hai th√¥ng tin c·∫ßn thi·∫øt:
        // 1Ô∏è‚É£ URI ·∫£nh (chuy·ªÉn th√†nh chu·ªói ƒë·ªÉ truy·ªÅn qua Data)
        // 2Ô∏è‚É£ M·ª©c ƒë·ªô l√†m m·ªù
        builder.putString(KEY_IMAGE_URI, imageUri.toString())
            .putInt(KEY_BLUR_LEVEL, blurLevel)

        // Tr·∫£ v·ªÅ Data ho√†n ch·ªânh.
        return builder.build()
    }
}
